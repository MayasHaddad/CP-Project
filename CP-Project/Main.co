include "Tuples";
include "Reader";
include "Parser";
include "Writer";

import cotfd;

string[] myArgs = System.getArgs();
if(myArgs.getSize() != 3){
   cout << "Usage : comet Main.co inputFile" << endl;
   return; 
   }

Solver<CP> mySolver();

Reader r = Reader();
r.read(myArgs[2]);
Parser p = new Parser(r.getCommands());
p.parse();



dict{set{string}->set{string}} personBySameOption = p.getPersonBySameOption();
/*
   Le personBySameOption associe a chaque set d'options la liste des id des étudiants qui ont pris exactement ces options
*/

dict{set{string}->int} sizePerson= new dict{set{string}->int}();
/*
   Le sizePerson associe à chaque set d'options le nombre d'étudiants qui ont pris exactement ces options
*/

dict{string->dict{group->var<CP>{int}}} dictGroup = new dict{string->dict{group->var<CP>{int}}}();
/*
   Le dictGroup associe chaque matiere(sous forme de string) a un dictionnaire qui associe chaque groupe de cette matiere a une variable contrainte représentant l'effectif de ce groupe.
*/

dict{var<CP>{int} -> dict{set{string}->var<CP>{int}}} dictDivGroup = new dict{var<CP>{int} -> dict{set{string}->var<CP>{int}}}();
/*
   Le dictDivGroup associe chaque variable contrainte du divGroup a un dictionnaire qui associe chaque set d'options contenant la matiere de ce groupe à une variable contrainte.
*/
dict{var<CP>{int} -> int} myDict;
set{group} mySet = p.getGroup();
set{set{string}} keys = personBySameOption.getKeys(); // Tous les choix pris

forall(i in keys){
  sizePerson{i} = personBySameOption{i}.getSize(); 
}

//Construction des dictionnaires dictGroup et dictDivGroupŝ
forall(i in mySet){
   if(!dictGroup.hasKey(i.groupId)){
            dict{group->var<CP>{int}} listeCreneau = new dict{group->var<CP>{int}}();
            range r = 0..i.effMax;
            listeCreneau{i} = new var<CP>{int} (mySolver,r);
            dictGroup{i.groupId} = listeCreneau;   
            
            dict{set{string}->var<CP>{int}} aa = buildArray(i.groupId, sizePerson, mySolver);
            dictDivGroup{listeCreneau{i}} = aa;
         
    
      }else{     
            range r = 0..i.effMax;
            dictGroup{i.groupId}{i} = new var<CP>{int} (mySolver,r);
            dict{set{string}->var<CP>{int}} aa = buildArray(i.groupId, sizePerson, mySolver);            
            dictDivGroup{dictGroup{i.groupId}{i}} = aa;
      }
}


function dict{set{string}->var<CP>{int}} buildArray(string group, dict{set{string}->int} sizePerson,Solver<CP> mySolver){
   dict{set{string}->var<CP>{int}}
   newDict = new dict{set{string}->var<CP>{int}}();
   set{set{string}} keys = sizePerson.getKeys();
   forall(i in keys){
        if(i.contains(group)){          
              range r = 0..sizePerson{i};
              newDict{i} = new var<CP>{int} (mySolver,r);
      }        
   }
      return newDict;
}

function int calculeTotal(string s, dict{set{string}->int} sizePerson){
   int a = 0;
   set{set{string}} keys = sizePerson.getKeys();
   forall(i in keys){
        if(i.contains(s)){
            a = a+sizePerson{i};         
        }
   }
   return a;
}

function void creerContrainte(dict{var<CP>{int} -> int} myDict,set{string} key, dict{var<CP>{int} -> dict{set{string}->var<CP>{int}}} dictDivGroup,dict{set{string}->int} sizePerson,Solver<CP> mySolver){
      set{var<CP>{int}} keys = myDict.getKeys();
      
      mySolver.post(  (sum(i in keys) dictDivGroup{i}{key}) <= sizePerson{key});


}

solve<mySolver>{

/*
   Pour une option donnée, la somme de tous les étudiants dans les groupes de cette option ayant pris un set d'option donné est égal au nombre d'étudiants ayant pris ce set d'option donné 
*/

set{string} option = dictGroup.getKeys();
forall(o in option){
   set{var<CP>{int}} keyss = {};
   set{group}myNewSet = dictGroup{o}.getKeys();
   forall(h in myNewSet){
      keyss.insert(dictGroup{o}{h});
   }

   dict{set{string}->set{var<CP>{int}}} myNewDict = new dict{set{string}->set{var<CP>{int}}}();
   forall(i in keyss){    
     set{set{string}} keyy = dictDivGroup{i}.getKeys();
     forall(j in keyy){
        if(!myNewDict.hasKey(j)){
           myNewDict{j} ={};
           myNewDict{j}.insert(dictDivGroup{i}{j});
        }
        else{
           myNewDict{j}.insert(dictDivGroup{i}{j});
        }
     }
   }

   set{set{string}} myOptionList = myNewDict.getKeys();
   forall(i in myOptionList){
        set{var<CP>{int}}mySet = myNewDict{i};  
        mySolver.post(  (sum(j in mySet) j) == sizePerson{i});
   }

}




//La somme des étudiants ayant pris une option est égale à la somme des étudiants contenue dans les groupes de cette option.  
set{string} keys = dictGroup.getKeys();
forall(i in keys){
   int totPers = calculeTotal(i,sizePerson);
   set{group} tabCreneau = dictGroup{i}.getKeys(); 
    mySolver.post(  (sum(j in tabCreneau) dictGroup{i}{j}) == totPers);
}

/*
   Contrainte d'ubiquité : Une personne ne peut pas etre dans deux groupes se déroulant à la même heure
*/
set{set{string}} key = sizePerson.getKeys();
forall(i in key){    
   bool a = false;   
   forall(j in i){
      set{group} horaireOption = dictGroup{j}.getKeys();
      forall(horair in horaireOption){
      int horaire = horair.creneau;
      forall(k in i){
        myDict = new dict{var<CP>{int} -> int}();
              set{group} horaireOptionGroupDeux = dictGroup{k}.getKeys();
              forall(groupe in horaireOptionGroupDeux){
                  int aaa = groupe.creneau;
                  
                  if(aaa == horaire && horair != groupe){
                 
                     if(!myDict.hasKey(dictGroup{j}{horair})){
                        a=true;
                        myDict{dictGroup{j}{horair}}=1;
                     } 
                     if(!myDict.hasKey(dictGroup{k}{groupe})){
                        a=true;
                        myDict{dictGroup{k}{groupe}}=1;
                     }                    
                  }
               }                                          
         }
         if(a){
          creerContrainte(myDict,i,dictDivGroup,sizePerson,mySolver);
         }               
      }              
   }    
}


/*
   Le nombre d'étudiant dans un groupe est égal a la somme de toutes les sous variables associées à ce groupe ( qui représentent chaque part d'étudiants ayant pris des sets d'option différents dans ce groupe)
*/
set{var<CP>{int}} tmpa = dictDivGroup.getKeys();
   forall(i in tmpa){
      set{set{string}} tmp = dictDivGroup{i}.getKeys();
      mySolver.post( (sum (j in tmp) dictDivGroup{i}{j} ) == i);

}



} using{
   set{var<CP>{int}} keys = dictDivGroup.getKeys();
   forall(i in keys){
      label(i);
      set{set{string}} key = dictDivGroup{i}.getKeys();
      forall(j in key){
         label(dictDivGroup{i}{j});
      }
   }
   /*
      Récupération des données dans un set d'affectation afin d'etre ecrites dans le fichier
   */
   set{affectation} affectationSet = {};
   set{string} listeOp = dictGroup.getKeys();
   forall(i in listeOp){
      dict{set{string}->set{string}} copy = new dict{set{string}->set{string}}();
      set{group}listeGroup = dictGroup{i}.getKeys();

      forall(j in listeGroup){
         set{set{string}} aa = dictDivGroup{dictGroup{i}{j}}.getKeys();
         forall(k in aa){
            if(!copy.hasKey(k)){
               copy{k}=personBySameOption{k}.copy();
            }
         }
      }
      forall(j in listeGroup) {
         set{string} personId = {};
         set{set{string}} aa = dictDivGroup{dictGroup{i}{j}}.getKeys();
         forall(k in aa){
            int nb = dictDivGroup{dictGroup{i}{j}}{k};
            for(int count = 0; count <nb; count++){
               personId.insert(copy{k}.atRank(0));
               copy{k}.delete(copy{k}.atRank(0));
            }                    
         }
         affectationSet.insert(affectation(j.groupIdentifiant,dictGroup{i}{j},personId));         
      }
   }

    //Ecriture dans le fichier resultat
    Writer w(myArgs[2]+"_Modele_1");
    w.write(affectationSet);

}
