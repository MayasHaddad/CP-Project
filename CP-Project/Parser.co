include "Tuples";
class Parser{

set{person} persons;
set{group} groups;
set{string} fileCommands;
dict{set{string}->set{string}} personsBySameOptions; // Regrouper les pesonnes par options choisies

Parser(set{string} commandSet){
   // Inialiser notre set de commandes local avec un set en input
   fileCommands = commandSet;
   persons = {};
   groups = {};
  personsBySameOptions = new dict{set{string}->set{string}}();
}

set{person} getPerson(){
   return persons;
}

set{group} getGroup(){
   return groups;
}

dict{set{string}->set{string}} getPersonBySameOption(){
   return personsBySameOptions;
}
void parse(){
   forall (i in fileCommands){
      string[] sTab = i.split(" ");
      if(sTab[0].equals("personne")) {
         addPerson(sTab);
      }
      if(sTab[0].equals("groupe")){
          addGroup(sTab);
         }
      }
   }

void addToOptions(string personId, set{string} optionsId){      

      if(!personsBySameOptions.hasKey(optionsId)){
            personsBySameOptions{optionsId} = {personId};       
      }else{     
            personsBySameOptions{optionsId}.insert(personId);
      }
}

void addPerson(string[] stringTab){
      string name = stringTab[1];
      set{string} myOptions={};
      for(int i = 2; i<stringTab.getSize() ;i++){
         if(!stringTab[i].equals("")) myOptions.insert(stringTab[i]);
      }
      persons.insert(person(name,myOptions));
      // On insre la personne avec les personnes ayant choisi exactement les mmes option
      addToOptions(name,myOptions);
   }

void addGroup(string[] stringTab){
      groups.insert(group(stringTab[2],stringTab[3].toInt(),stringTab[4].toInt(),stringTab[5].toInt(),stringTab[1]));
      //cout << groups << endl;
   }

void print(){
 //forall(i in persons) cout<< i <<endl; 
//forall(i in groups) cout<< i <<endl;
   set{set{string}} keys = personsBySameOptions.getKeys();
   forall(i in keys){
   cout<< i << ":" << endl;
   forall(j in personsBySameOptions{i})  cout << j <<endl;
   }
}

}